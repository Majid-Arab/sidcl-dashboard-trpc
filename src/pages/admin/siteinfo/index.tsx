import { type NextPage } from "next";
import Head from "next/head";
import { AddFormModal } from "@Components/Modal";
import { trpc } from "../../../utils/trpc";
import { DataTable } from "mantine-datatable";
import { openConfirmModal } from "@mantine/modals";
import { useEffect, useState } from "react";
import {
  ActionIcon,
  Box,
  Button,
  Flex,
  Group,
  Title,
  Text,
} from "@mantine/core";
import { IconEdit, IconTrash } from "@tabler/icons";
import { useDisclosure } from "@mantine/hooks";
const SiteInfo: NextPage = () => {
  const [limit, setLimit] = useState(10);
  const [cursor, setCursor] = useState<number>();
  const [page, setPage] = useState(1);
  const { data, isLoading, refetch } = trpc.siteinfo.paginated.useQuery(
    {
      limit: limit,
      // cursor:cursor ?? null
    },
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
    }
  );

  useEffect(() => {
    refetch();

    // return () => {
    //   second
    // }
  }, [limit]);

  if (data) {
    // console.log(data.items[0]);
  }

  const openDeleteModal = () =>
    openConfirmModal({
      title: "Delete your profile",
      centered: true,
      children: (
        <Text size="sm">
          Are you sure you want to delete your profile? This action is
          destructive and you will have to contact support to restore your data.
        </Text>
      ),
      labels: { confirm: "Delete account", cancel: "No don't delete it" },
      confirmProps: { color: "red" },
      onCancel: () => console.log("Cancel"),
      onConfirm: () => {deleteSite},
    });

  const [opened, { close, open }] = useDisclosure(false);
  const [updateSite, setUpdateSite] = useState({});
  const [deleteSite, setDeleteSite] = useState({});

  return (
    <>
      <Head>
        <title>Site Information</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex
        mih={50}
        bg="rgba(0, 0, 0, .3)"
        gap="xl"
        justify="space-between"
        align="center"
        direction="row"
        wrap="wrap"
      >
        <Title>Site Information</Title>
        <AddFormModal close={close} opened={opened} site={updateSite ?? {}} />
        <Group position="center">
          <Button
            onClick={() => {
              setUpdateSite({});
              open();
            }}
          >
            Open modal
          </Button>
        </Group>
      </Flex>

      <Box>
        <DataTable
          withBorder
          records={data?.items}
          columns={[
            { accessor: "site_id", width: 100 },
            {
              accessor: "client",
              // width: 100,
              // render: ({ client }) => <>{client.name}</>,
            },
            {
              accessor: "invoice_status",
              // accessor: "invoice_status",
              // width: 100,
              // render: ({ invoice_status }) => (
              //   <>{invoice_status?.invoice_status}</>
              // ),
            },
            {
              accessor: "Action",
              width: 100,
              render: (record) => (
                <>
                  <Group>
                    <ActionIcon
                      color="blue"
                      variant="light"
                      onClick={() => {
                        // setUpdateSite(record);
                        open();
                      }}
                    >
                      {/* <IconEdit size={16} /> */}edit
                    </ActionIcon>
                    <ActionIcon
                      color="red"
                      variant="light"
                      onClick={openDeleteModal}
                    >
                      {/* <IconTrash size={16} /> */}delete
                    </ActionIcon>
                  </Group>
                </>
              ),
            },
          ]}
          totalRecords={data?.totalDocs}
          recordsPerPage={limit}
          page={page}
          fetching={isLoading}
          onPageChange={(p) => {
            setPage(p);
            // setCursor(data?.pages[0]?.nextCursor);
          }}
          recordsPerPageOptions={[10, 50, 100]}
          onRecordsPerPageChange={setLimit}
        />
      </Box>
    </>
  );
};

export default SiteInfo;
